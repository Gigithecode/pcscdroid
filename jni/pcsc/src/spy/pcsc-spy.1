.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PCSC-SPY 1"
.TH PCSC-SPY 1 "2016-09-09" "pcsc-lite 1.8.18" "PC/SC lite"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
pcsc\-spy \- A PC/SC spy command
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
pcsc-spy [\fB\-n\fR|\fB\-\-nocolor\fR] [\fB\-d\fR|\fB\-\-diffable\fR] [\fB\-h\fR|\fB\-\-help\fR]
[\fIfifo_filename\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
pcsc-spy displays \s-1PC/SC\s0 calls of an application. It must be used with
the \fIlibpcscspy.so\fR library.
.PP
To be able to spy the \s-1PC/SC\s0 layer, the application flow must be
modified so that all \s-1PC/SC\s0 calls are redirected. Two options are
available:
.IP "\- the application is linked with \fIlibpcsclite.so.1\fR" 4
.IX Item "- the application is linked with libpcsclite.so.1"
.PD 0
.IP "\- the application loads the \fIlibpcsclite.so.1\fR library using \fIdlopen\fR\|(3)" 4
.IX Item "- the application loads the libpcsclite.so.1 library using dlopen"
.PD
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-d\fR, \fB\-\-diffable\fR" 4
.IX Item "-d, --diffable"
Remove the variable parts (like handler values) from the output so that
two execution can be more easily compared.
.IP "\fB\-h\fR, \fB\-\-help\fR" 4
.IX Item "-h, --help"
Display a short help text.
.IP "\fB\-n\fR, \fB\-\-nocolor\fR" 4
.IX Item "-n, --nocolor"
Disable the output colorization (if you want redirect the output in a
file for example).
.IP "\fB\-v\fR, \fB\-\-version\fR" 4
.IX Item "-v, --version"
Print the version of the \fIpcsc-spy\fR program plus a copyright, a list of
authors.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "Applications linked with libpcsclite.so.1"
.IX Subsection "Applications linked with libpcsclite.so.1"
We will use the standard \f(CW\*(C`LD_PRELOAD\*(C'\fR loader option to load our spying
library.
.PP
Example:
.PP
.Vb 1
\& LD_PRELOAD=/usr/lib/libpcscspy.so pcsc_scan
.Ve
.SS "Application loading libpcsclite.so.1"
.IX Subsection "Application loading libpcsclite.so.1"
This is the case for the \s-1PC/SC\s0 wrappers like pyscard (for Python) and
pcsc-perl (for Perl). The \s-1LD_PRELOAD\s0 mechanism can't be used. Instead
we replace the \fIlibpcsclite.so.1\fR library by the spying one.
.PP
You may use \fIinstall_spy.sh\fR and \fIuninstall_spy.sh\fR to install and
uninstall the spying library.
.PP
Using the spying library without \fIpcsc-spy\fR is not a problem but has
side effects:
.PP
\&\- a line \*(L"libpcsclite_nospy.so.1: cannot open shared object file:
No such file or directory\*(R" will be displayed
.PP
\&\- some \s-1CPU\s0 time will be lost because of the \s-1PC/SC\s0 calls redirection
.SS "Starting the spy tool"
.IX Subsection "Starting the spy tool"
.Vb 1
\& pcsc\-spy
.Ve
.PP
If a command argument is passed we use it instead of the default
\&\fI~/pcsc\-spy\fR \s-1FIFO\s0 file. It is then possible to record an execution log
and use pcsc-spy multiple times on the same log.
.PP
To create the log file just do:
.PP
.Vb 2
\& mkfifo ~/pcsc\-spy
\& cat ~/pcsc\-spy > logfile
.Ve
.PP
and run your \s-1PC/SC\s0 application.
.SS "Mac \s-1OS X\s0"
.IX Subsection "Mac OS X"
The installation is not automatic. In the pcsc\-lite/src/spy directory do:
.PP
.Vb 1
\& make framework
.Ve
.PP
Then copy the \s-1PCSC\s0.framework directory in /tmp
.PP
.Vb 1
\& cp \-a PCSC.framework /tmp
.Ve
.PP
Copy the official \s-1PCSC\s0.framework (binary only) in /tmp
.PP
.Vb 1
\& cp /System/Library/Frameworks/PCSC.framework/PCSC /tmp
.Ve
.PP
Run the application to debug as:
.PP
.Vb 1
\& DYLD_FRAMEWORK_PATH=/tmp pcsctest
.Ve
.SH "FILES"
.IX Header "FILES"
\&\fI~/pcsc\-spy\fR \s-1FIFO\s0 file is used by \fIlibpcsclite.so.1\fR to send the raw
log lines
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIpcscd\fR\|(8)
.SH "AUTHOR"
.IX Header "AUTHOR"
This manual page was written by Ludovic Rousseau <rousseau@free.fr>
